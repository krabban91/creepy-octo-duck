never PropAB {    /* !([] ((! (((statusA==ok)) && ((statusB==ok)))) || (((partnerA==agentB)) && ((partnerB==agentA))))) */
T0_init:
	do
	:: atomic { (! (((! (((statusA==ok)) && ((statusB==ok)))) || (((partnerA==agentB)) && ((partnerB==agentA)))))) -> assert(!(! (((! (((statusA==ok)) && ((statusB==ok)))) || (((partnerA==agentB)) && ((partnerB==agentA))))))) }
	:: (1) -> goto T0_init
	od;
accept_all:
	skip
}
never PropA {    /* !([] ((! (((statusA==ok)) && ((partnerA==agentB)))) || (! (knows_nonceA)))) */
T0_init:
	do
	:: atomic { (! (((! (((statusA==ok)) && ((partnerA==agentB)))) || (! (knows_nonceA))))) -> assert(!(! (((! (((statusA==ok)) && ((partnerA==agentB)))) || (! (knows_nonceA)))))) }
	:: (1) -> goto T0_init
	od;
accept_all:
	skip
}
never PropB {    /* !([] ((! (((statusB==ok)) && ((partnerB==agentA)))) || (! (knows_nonceB)))) */
T0_init:
	do
	:: atomic { (! (((! (((statusB==ok)) && ((partnerB==agentA)))) || (! (knows_nonceB))))) -> assert(!(! (((! (((statusB==ok)) && ((partnerB==agentA)))) || (! (knows_nonceB)))))) }
	:: (1) -> goto T0_init
	od;
accept_all:
	skip
}
