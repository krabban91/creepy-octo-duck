---------------------------------------------------------Task1 and Task2---
Verified as:
	spin -a NS2.pml
	gcc pan -o pan.c
	./pan -e -a

Full statespace seflagsarch for:
	never claim         	+ (always_end_ok)
	assertion violations	+ (if within scope of claim)
	acceptance   cycles 	+ (fairness disabled)

State-vector 60 byte, depth reached 33, errors: 0

-a to generate a model checker from spin, compile and run.
Using -a to search for acceptence cycles since we have a safety property (always)

---------------------------------------------------------Task3---


	./pan -e -a
	spin -t -p

Running the ./pan with -e and -a flag allows us to have one trace for each acceptance error.
By renaming one of these trails to the actual name.trail we could follow the path.  

Running pan with the intruders found many errors here's the printout of one of them. 

Full statespace search for:
	never claim         	+ (always_end_ok)
	assertion violations	+ (if within scope of claim)
	acceptance   cycles 	+ (fairness disabled)
	invalid end states	- (disabled by never claim)

State-vector 76 byte, depth reached 43, errors: 1463

ltl always_end_ok: <> (((statusA==ok)) && ((statusB==ok)))
starting claim 3
using statement merging
Never claim moves to line 4	[(!(((statusA==ok)&&(statusB==ok))))]
  2:	proc  2 (JockeP:1) NS3.pml:134 (state 8)	[msg = msg1]
  4:	proc  2 (JockeP:1) NS3.pml:140 (state 14)	[recpt = agentB]
  6:	proc  2 (JockeP:1) NS3.pml:143 (state 17)	[data.key = intercepted.key]
  6:	proc  2 (JockeP:1) NS3.pml:144 (state 18)	[data.content1 = intercepted.content1]
  6:	proc  2 (JockeP:1) NS3.pml:145 (state 19)	[data.content2 = intercepted.content2]
  8:	proc  1 (Bob:1) NS3.pml:89 (state 1)	[partnerB = agentA]
 10:	proc  1 (Bob:1) NS3.pml:90 (state 2)	[pkey = keyA]
 12:	proc  2 (JockeP:1) NS3.pml:159 (state 34)	[network!msg,recpt,data.key,data.content1,data.content2]
 13:	proc  1 (Bob:1) NS3.pml:93 (state 3)	[network?msg1,agentB,data.key,data.content1,data.content2]
 15:	proc  2 (JockeP:1) NS3.pml:134 (state 8)	[msg = msg1]
 17:	proc  2 (JockeP:1) NS3.pml:139 (state 13)	[recpt = agentA]
 19:	proc  2 (JockeP:1) NS3.pml:143 (state 17)	[data.key = intercepted.key]
 19:	proc  2 (JockeP:1) NS3.pml:144 (state 18)	[data.content1 = intercepted.content1]
 19:	proc  2 (JockeP:1) NS3.pml:145 (state 19)	[data.content2 = intercepted.content2]
 21:	proc  0 (Alice:1) NS3.pml:31 (state 1)	[partnerA = agentB]
 23:	proc  0 (Alice:1) NS3.pml:32 (state 2)	[pkey = keyB]
 23:	proc  0 (Alice:1) NS3.pml:36 (state 3)	[messageAB.key = pkey]
 23:	proc  0 (Alice:1) NS3.pml:37 (state 4)	[messageAB.content1 = agentA]
 23:	proc  0 (Alice:1) NS3.pml:38 (state 5)	[messageAB.content2 = nonceA]
  <<<<<START OF CYCLE>>>>>
spin: trail ends after 25 steps
#processes: 3
		partnerA = agentB
		partnerB = agentA
		statusA = err
		statusB = err
 25:	proc  2 (JockeP:1) NS3.pml:159 (state 34)
 25:	proc  1 (Bob:1) NS3.pml:99 (state 4)
 25:	proc  0 (Alice:1) NS3.pml:42 (state 6)
 25:	proc  - (always_end_ok:1) _spin_nvr.tmp:3 (state 3)
3 processes created

The execution is as follows: 
JockeP (our intruder) begins preparing a message.
Bob begins setting partner och his key meant for Alice.
JockeP message.
Bob recieves a message and ends up blocking as he cannot verify it's Alice's key.
JockeP prepares and tries to send another message, gets blocked.
Alice prepares her first message and tries to send it and gets blocked.

End states for the different processes:
JockeP wants to send a message.
Alice wants to send a message.
Bob is stuck trying to verify the key of his recieved message.

Neither Alice's or Bob's status is OK.


--------------------------------------------------------- Task6 ---

	spin -a NS6.pml
	./pan -a N PropAB
	./pan -a N PropA
	./pan -a N PropB

only the ltl PropA held. here is the trace for PropAB.
	(./pan -a N PropAB
	 spin -t -p NS6.pml)

ltl PropAB: [] ((! (((statusA==ok)) && ((statusB==ok)))) || (((partnerA==agentB)) && ((partnerB==agentA))))
ltl PropA: [] ((! (((statusA==ok)) && ((partnerA==agentB)))) || (! (knows_nonceA)))
ltl PropB: [] ((! (((statusB==ok)) && ((partnerB==agentA)))) || (! (knows_nonceB)))
starting claim 3
using statement merging
Never claim moves to line 4	[(1)]
  2:	proc  1 (Bob:1) NS6.pml:94 (state 1)	[partnerB = agentA]
  4:	proc  1 (Bob:1) NS6.pml:95 (state 2)	[pkey = keyA]
  6:	proc  0 (Alice:1) NS6.pml:36 (state 3)	[partnerA = agentI]
  8:	proc  0 (Alice:1) NS6.pml:36 (state 4)	[pkey = keyI]
  8:	proc  0 (Alice:1) NS6.pml:41 (state 7)	[messageAB.key = pkey]
  8:	proc  0 (Alice:1) NS6.pml:42 (state 8)	[messageAB.content1 = agentA]
  8:	proc  0 (Alice:1) NS6.pml:43 (state 9)	[messageAB.content2 = nonceA]
 10:	proc  0 (Alice:1) NS6.pml:47 (state 10)	[network!msg1,partnerA,messageAB.key,messageAB.content1,messageAB.content2]
 11:	proc  2 (JockeP:1) NS6.pml:130 (state 1)	[network?msg_type,_,data.key,data.content1,data.content2]
 13:	proc  2 (JockeP:1) NS6.pml:132 (state 2)	[((data.key==keyI))]
 13:	proc  2 (JockeP:1) NS6.pml:133 (state 3)	[intercepted.key = data.key]
 13:	proc  2 (JockeP:1) NS6.pml:134 (state 4)	[intercepted.content1 = data.content1]
 13:	proc  2 (JockeP:1) NS6.pml:135 (state 5)	[intercepted.content2 = data.content2]
 15:	proc  2 (JockeP:1) NS6.pml:137 (state 6)	[(((msg_type==msg1)&&(intercepted.content1==agentA)))]
 17:	proc  2 (JockeP:1) NS6.pml:137 (state 7)	[knows_nonceA = 1]
 19:	proc  2 (JockeP:1) NS6.pml:146 (state 17)	[msg = msg1]
 21:	proc  2 (JockeP:1) NS6.pml:152 (state 23)	[recpt = agentB]
 23:	proc  2 (JockeP:1) NS6.pml:159 (state 29)	[((msg==msg1))]
 23:	proc  2 (JockeP:1) NS6.pml:161 (state 30)	[data.content1 = agentA]
 25:	proc  2 (JockeP:1) NS6.pml:164 (state 32)	[(knows_nonceA)]
 27:	proc  2 (JockeP:1) NS6.pml:164 (state 33)	[data.content2 = nonceA]
 29:	proc  2 (JockeP:1) NS6.pml:189 (state 65)	[data.key = keyB]
 31:	proc  2 (JockeP:1) NS6.pml:194 (state 71)	[network!msg,recpt,data.key,data.content1,data.content2]
 32:	proc  1 (Bob:1) NS6.pml:98 (state 3)	[network?msg1,agentB,data.key,data.content1,data.content2]
 34:	proc  1 (Bob:1) NS6.pml:104 (state 4)	[(((data.key==keyB)&&(data.content1==partnerB)))]
 36:	proc  1 (Bob:1) NS6.pml:105 (state 5)	[pnonce = data.content2]
 36:	proc  1 (Bob:1) NS6.pml:108 (state 6)	[messageBA.key = pkey]
 36:	proc  1 (Bob:1) NS6.pml:109 (state 7)	[messageBA.content1 = pnonce]
 36:	proc  1 (Bob:1) NS6.pml:110 (state 8)	[messageBA.content2 = nonceB]
 38:	proc  1 (Bob:1) NS6.pml:113 (state 9)	[network!s,partnerB,messageBA.key,messageBA.content1,messageBA.content2]
 39:	proc  0 (Alice:1) NS6.pml:54 (state 11)	[network?msg2,agentA,data.key,data.content1,data.content2]
 41:	proc  0 (Alice:1) NS6.pml:60 (state 12)	[(((data.key==keyA)&&(data.content1==nonceA)))]
 41:	proc  0 (Alice:1) NS6.pml:64 (state 13)	[pnonce = data.content2]
 41:	proc  0 (Alice:1) NS6.pml:67 (state 14)	[messageAB.key = pkey]
 41:	proc  0 (Alice:1) NS6.pml:68 (state 15)	[messageAB.content1 = pnonce]
 41:	proc  0 (Alice:1) NS6.pml:69 (state 16)	[messageAB.content2 = 0]
 43:	proc  0 (Alice:1) NS6.pml:74 (state 17)	[network!msg3,partnerA,messageAB.key,messageAB.content1,messageAB.content2]
 44:	proc  2 (JockeP:1) NS6.pml:130 (state 1)	[network?msg_type,_,data.key,data.content1,data.content2]
 46:	proc  2 (JockeP:1) NS6.pml:132 (state 2)	[((data.key==keyI))]
 46:	proc  2 (JockeP:1) NS6.pml:133 (state 3)	[intercepted.key = data.key]
 46:	proc  2 (JockeP:1) NS6.pml:134 (state 4)	[intercepted.content1 = data.content1]
 46:	proc  2 (JockeP:1) NS6.pml:135 (state 5)	[intercepted.content2 = data.content2]
 48:	proc  2 (JockeP:1) NS6.pml:138 (state 8)	[(((msg_type==msg3)&&(intercepted.content1==nonceB)))]
 50:	proc  2 (JockeP:1) NS6.pml:138 (state 9)	[knows_nonceB = 1]
 52:	proc  2 (JockeP:1) NS6.pml:148 (state 19)	[msg = msg3]
 54:	proc  2 (JockeP:1) NS6.pml:152 (state 23)	[recpt = agentB]
 56:	proc  2 (JockeP:1) NS6.pml:178 (state 53)	[((msg==msg3))]
 58:	proc  2 (JockeP:1) NS6.pml:182 (state 57)	[(knows_nonceB)]
 60:	proc  2 (JockeP:1) NS6.pml:182 (state 58)	[data.content1 = nonceB]
 60:	proc  2 (JockeP:1) NS6.pml:185 (state 61)	[data.content2 = 0]
 62:	proc  2 (JockeP:1) NS6.pml:189 (state 65)	[data.key = keyB]
 64:	proc  2 (JockeP:1) NS6.pml:194 (state 71)	[network!msg,recpt,data.key,data.content1,data.content2]
 65:	proc  1 (Bob:1) NS6.pml:116 (state 10)	[network?msg3,agentB,data.key,data.content1,data.content2]
 67:	proc  1 (Bob:1) NS6.pml:117 (state 11)	[(((data.key==keyB)&&(data.content1==nonceB)))]
 69:	proc  2 (JockeP:1) NS6.pml:146 (state 17)	[msg = msg1]
 71:	proc  2 (JockeP:1) NS6.pml:151 (state 22)	[recpt = agentA]
 73:	proc  2 (JockeP:1) NS6.pml:155 (state 26)	[data.key = intercepted.key]
 73:	proc  2 (JockeP:1) NS6.pml:156 (state 27)	[data.content1 = intercepted.content1]
 73:	proc  2 (JockeP:1) NS6.pml:157 (state 28)	[data.content2 = intercepted.content2]
 75:	proc  1 (Bob:1) NS6.pml:119 (state 12)	[statusB = ok]
              Done Bob
 77:	proc  1 (Bob:1) NS6.pml:121 (state 13)	[printf('Done Bob\\n')]
 79:	proc  0 (Alice:1) NS6.pml:78 (state 18)	[statusA = ok]
spin: _spin_nvr.tmp:3, Error: assertion violated
spin: text of failed assertion: assert(!(!((!(((statusA==ok)&&(statusB==ok)))||((partnerA==agentB)&&(partnerB==agentA))))))
Never claim moves to line 3	[assert(!(!((!(((statusA==ok)&&(statusB==ok)))||((partnerA==agentB)&&(partnerB==agentA))))))]
spin: trail ends after 80 steps
#processes: 3
		partnerA = agentI
		partnerB = agentA
		statusA = ok
		statusB = ok
		knows_nonceA = 1
		knows_nonceB = 1
 80:	proc  2 (JockeP:1) NS6.pml:194 (state 71)
 80:	proc  1 (Bob:1) NS6.pml:123 (state 14) <valid end state>
 80:	proc  0 (Alice:1) NS6.pml:80 (state 19)
 80:	proc  - (part6_1:1) _spin_nvr.tmp:2 (state 6)
3 processes created

The execution is as follows:
Alice sends her first message with JockeP (our intruder).
JockeP recieves the message and now knows Alice nonce.
JockeP sends a message to Bob using Alice nonce.
Bob recieves the message from JockeP and sends back his nonce to Alice.
Alice recieves the message from Bob and sends the confirm message to JockeP including Bob's nonce.
JockeP recieves the message and thus knows Bob's nonce and then sends a confirm message to Bob.
Bob recieves the message (which he thinks is from Alice).
JockeP prepares a new message.
Both Bob and Alice now thinks that the protocol has worked and StatusX = ok.

This causes the ltl expressions "PropAB" and "PropB" to break.


--------------------------------------------------------- task7 ---


After patching the protocol by adding a check at alice's side to see who we are talking to she notices that she is receiving messages from someone else than she is sending to. And by locking at that location Bob will never receive the final verification message from Alice (m3: {Nb}).
In other words: if the Intruder knows Bob's Nonce; the protocol has not been complete. The following ltl forms:
always( knowsNonceB -> (statusB != ok) ) 