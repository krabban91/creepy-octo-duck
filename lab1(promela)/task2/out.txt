ltl part6_1: [] ((! (((statusA==ok)) && ((statusB==ok)))) || (((partnerA==agentB)) && ((partnerB==agentA))))
ltl part6_2: [] ((! (((statusA==ok)) && ((partnerA==agentB)))) || (! (knows_nonceA)))
ltl part6_3: [] ((! (((statusB==ok)) && ((partnerB==agentA)))) || (! (knows_nonceB)))
starting claim 3
using statement merging
Never claim moves to line 4	[(1)]
  2:	proc  1 (Bob:1) NS6.pml:94 (state 1)	[partnerB = agentA]
  4:	proc  1 (Bob:1) NS6.pml:95 (state 2)	[pkey = keyA]
  6:	proc  0 (Alice:1) NS6.pml:36 (state 3)	[partnerA = agentI]
  8:	proc  0 (Alice:1) NS6.pml:36 (state 4)	[pkey = keyI]
  8:	proc  0 (Alice:1) NS6.pml:41 (state 7)	[messageAB.key = pkey]
  8:	proc  0 (Alice:1) NS6.pml:42 (state 8)	[messageAB.content1 = agentA]
  8:	proc  0 (Alice:1) NS6.pml:43 (state 9)	[messageAB.content2 = nonceA]
 10:	proc  0 (Alice:1) NS6.pml:47 (state 10)	[network!msg1,partnerA,messageAB.key,messageAB.content1,messageAB.content2]
 11:	proc  2 (JockeP:1) NS6.pml:130 (state 1)	[network?msg_type,_,data.key,data.content1,data.content2]
 13:	proc  2 (JockeP:1) NS6.pml:132 (state 2)	[((data.key==keyI))]
 13:	proc  2 (JockeP:1) NS6.pml:133 (state 3)	[intercepted.key = data.key]
 13:	proc  2 (JockeP:1) NS6.pml:134 (state 4)	[intercepted.content1 = data.content1]
 13:	proc  2 (JockeP:1) NS6.pml:135 (state 5)	[intercepted.content2 = data.content2]
 15:	proc  2 (JockeP:1) NS6.pml:137 (state 6)	[(((msg_type==msg1)&&(intercepted.content1==agentA)))]
 17:	proc  2 (JockeP:1) NS6.pml:137 (state 7)	[knows_nonceA = 1]
 19:	proc  2 (JockeP:1) NS6.pml:146 (state 17)	[msg = msg1]
 21:	proc  2 (JockeP:1) NS6.pml:152 (state 23)	[recpt = agentB]
 23:	proc  2 (JockeP:1) NS6.pml:159 (state 29)	[((msg==msg1))]
 23:	proc  2 (JockeP:1) NS6.pml:161 (state 30)	[data.content1 = agentA]
 25:	proc  2 (JockeP:1) NS6.pml:164 (state 32)	[(knows_nonceA)]
 27:	proc  2 (JockeP:1) NS6.pml:164 (state 33)	[data.content2 = nonceA]
 29:	proc  2 (JockeP:1) NS6.pml:189 (state 65)	[data.key = keyB]
 31:	proc  2 (JockeP:1) NS6.pml:194 (state 71)	[network!msg,recpt,data.key,data.content1,data.content2]
 32:	proc  1 (Bob:1) NS6.pml:98 (state 3)	[network?msg1,agentB,data.key,data.content1,data.content2]
 34:	proc  1 (Bob:1) NS6.pml:104 (state 4)	[(((data.key==keyB)&&(data.content1==partnerB)))]
 36:	proc  1 (Bob:1) NS6.pml:105 (state 5)	[pnonce = data.content2]
 36:	proc  1 (Bob:1) NS6.pml:108 (state 6)	[messageBA.key = pkey]
 36:	proc  1 (Bob:1) NS6.pml:109 (state 7)	[messageBA.content1 = pnonce]
 36:	proc  1 (Bob:1) NS6.pml:110 (state 8)	[messageBA.content2 = nonceB]
 38:	proc  1 (Bob:1) NS6.pml:113 (state 9)	[network!msg2,partnerB,messageBA.key,messageBA.content1,messageBA.content2]
 39:	proc  0 (Alice:1) NS6.pml:54 (state 11)	[network?msg2,agentA,data.key,data.content1,data.content2]
 41:	proc  0 (Alice:1) NS6.pml:60 (state 12)	[(((data.key==keyA)&&(data.content1==nonceA)))]
 41:	proc  0 (Alice:1) NS6.pml:64 (state 13)	[pnonce = data.content2]
 41:	proc  0 (Alice:1) NS6.pml:67 (state 14)	[messageAB.key = pkey]
 41:	proc  0 (Alice:1) NS6.pml:68 (state 15)	[messageAB.content1 = pnonce]
 41:	proc  0 (Alice:1) NS6.pml:69 (state 16)	[messageAB.content2 = 0]
 43:	proc  0 (Alice:1) NS6.pml:74 (state 17)	[network!msg3,partnerA,messageAB.key,messageAB.content1,messageAB.content2]
 44:	proc  2 (JockeP:1) NS6.pml:130 (state 1)	[network?msg_type,_,data.key,data.content1,data.content2]
 46:	proc  2 (JockeP:1) NS6.pml:132 (state 2)	[((data.key==keyI))]
 46:	proc  2 (JockeP:1) NS6.pml:133 (state 3)	[intercepted.key = data.key]
 46:	proc  2 (JockeP:1) NS6.pml:134 (state 4)	[intercepted.content1 = data.content1]
 46:	proc  2 (JockeP:1) NS6.pml:135 (state 5)	[intercepted.content2 = data.content2]
 48:	proc  2 (JockeP:1) NS6.pml:138 (state 8)	[(((msg_type==msg3)&&(intercepted.content1==nonceB)))]
 50:	proc  2 (JockeP:1) NS6.pml:138 (state 9)	[knows_nonceB = 1]
 52:	proc  2 (JockeP:1) NS6.pml:148 (state 19)	[msg = msg3]
 54:	proc  2 (JockeP:1) NS6.pml:152 (state 23)	[recpt = agentB]
 56:	proc  2 (JockeP:1) NS6.pml:178 (state 53)	[((msg==msg3))]
 58:	proc  2 (JockeP:1) NS6.pml:182 (state 57)	[(knows_nonceB)]
 60:	proc  2 (JockeP:1) NS6.pml:182 (state 58)	[data.content1 = nonceB]
 60:	proc  2 (JockeP:1) NS6.pml:185 (state 61)	[data.content2 = 0]
 62:	proc  2 (JockeP:1) NS6.pml:189 (state 65)	[data.key = keyB]
 64:	proc  2 (JockeP:1) NS6.pml:194 (state 71)	[network!msg,recpt,data.key,data.content1,data.content2]
 65:	proc  1 (Bob:1) NS6.pml:116 (state 10)	[network?msg3,agentB,data.key,data.content1,data.content2]
 67:	proc  1 (Bob:1) NS6.pml:117 (state 11)	[(((data.key==keyB)&&(data.content1==nonceB)))]
 69:	proc  2 (JockeP:1) NS6.pml:146 (state 17)	[msg = msg1]
 71:	proc  2 (JockeP:1) NS6.pml:151 (state 22)	[recpt = agentA]
 73:	proc  2 (JockeP:1) NS6.pml:155 (state 26)	[data.key = intercepted.key]
 73:	proc  2 (JockeP:1) NS6.pml:156 (state 27)	[data.content1 = intercepted.content1]
 73:	proc  2 (JockeP:1) NS6.pml:157 (state 28)	[data.content2 = intercepted.content2]
 75:	proc  1 (Bob:1) NS6.pml:119 (state 12)	[statusB = ok]
              Done Bob
 77:	proc  1 (Bob:1) NS6.pml:121 (state 13)	[printf('Done Bob\\n')]
 79:	proc  0 (Alice:1) NS6.pml:78 (state 18)	[statusA = ok]
spin: _spin_nvr.tmp:3, Error: assertion violated
spin: text of failed assertion: assert(!(!((!(((statusA==ok)&&(statusB==ok)))||((partnerA==agentB)&&(partnerB==agentA))))))
Never claim moves to line 3	[assert(!(!((!(((statusA==ok)&&(statusB==ok)))||((partnerA==agentB)&&(partnerB==agentA))))))]
spin: trail ends after 80 steps
#processes: 3
		partnerA = agentI
		partnerB = agentA
		statusA = ok
		statusB = ok
		knows_nonceA = 1
		knows_nonceB = 1
 80:	proc  2 (JockeP:1) NS6.pml:194 (state 71)
 80:	proc  1 (Bob:1) NS6.pml:123 (state 14) <valid end state>
 80:	proc  0 (Alice:1) NS6.pml:80 (state 19)
 80:	proc  - (part6_1:1) _spin_nvr.tmp:2 (state 6)
3 processes created
